$grid-wide-breakpoints: (
  xxs: 0,
  xs: 480px,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1430px
) !default;

$container-wide-max-widths: (
  xxs: 100%,
  xs: 100%,
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1200px,
  xxl: 1430px
) !default;
 

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-wide-max-widths($max-widths: $container-wide-max-widths, $breakpoints: $grid-wide-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}
@if $enable-grid-classes {
  .page-template-page-builder .ef5-content-area .container {
    @include make-container();
    @include make-container-wide-max-widths();
  }
  .ef5-footer-area .container {
    @include make-container();
    @include make-container-wide-max-widths();
  }
  body.woocommerce .container {
    @include make-container();
    @include make-container-wide-max-widths();
  }
}

// Return CSS Variables
@function theclick_scss_css_variable($var, $fallback: null) {
  @if($fallback) {
    @return var(--#{$var}, #{$fallback});
  }
  @return var(--#{$var});
}

// Get number from string
@function theclick_string_to_number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      //@return to-length(if($minus, -$result, $result), str-slice($value, $i))
      @return if($minus, -$result, $result);
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

// Strip number from string
@function theclick_strip_unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}